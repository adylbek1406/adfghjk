import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    const data = await request.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if (!data.customer || !data.items || !data.totalSum) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞' },
        { status: 400 }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const telegramSetting = await prisma.settings.findUnique({
      where: { key: 'telegram_id' }
    });
    
    if (!telegramSetting || !telegramSetting.value) {
      return NextResponse.json(
        { error: 'Telegram ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ' },
        { status: 500 }
      );
    }
    
    const telegramId = telegramSetting.value;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    const message = formatOrderMessage(data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await sendTelegramMessage(telegramId, message);
    
    if (!telegramResponse.ok) {
      const telegramError = await telegramResponse.text();
      console.error('Telegram API error:', telegramError);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error processing order:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function formatOrderMessage(data: any) {
  const { customer, items, totalSum } = data;
  
  let message = 'üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó*\n\n';
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  message += `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${customer.fullName}\n`;
  message += `üìû *–¢–∏–ø —Å–≤—è–∑–∏:* ${customer.contactType === 'whatsapp' ? 'WhatsApp' : '–ó–≤–æ–Ω–æ–∫'}\n`;
  message += `üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* ${customer.contactInfo}\n\n`;
  
  // –¢–æ–≤–∞—Ä—ã
  message += 'üìã *–¢–æ–≤–∞—Ä—ã:*\n';
  items.forEach((item: any, index: number) => {
    message += `${index + 1}. ${item.name} x ${item.quantity} = ${item.total.toLocaleString('ru-RU')} —Å–æ–º\n`;
  });
  
  // –ò—Ç–æ–≥–æ
  message += `\nüí∞ *–ò—Ç–æ–≥–æ:* ${totalSum.toLocaleString('ru-RU')} —Å–æ–º`;
  
  return message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: string, message: string) {
  // –ü–æ–ª—É—á–∞–µ–º Telegram Bot Token –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
  return fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
    }),
  });
} 