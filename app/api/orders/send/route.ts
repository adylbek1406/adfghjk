import { NextResponse } from 'next/server';
import { getTelegramId } from '@/app/lib/db';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown V2
function escapeMarkdownV2(text: string) {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

export async function POST(request: Request) {
  try {
    const orderData = await request.json();
    
    // –ü–æ–ª—É—á–∞–µ–º telegram_id –∞–¥–º–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const adminTelegramId = await getTelegramId();
    if (!adminTelegramId) {
      return NextResponse.json(
        { error: 'Admin Telegram ID not found' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!orderData.items || !Array.isArray(orderData.items)) {
      throw new Error('Invalid items data');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const itemsList = orderData.items.map((item: any) => {
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
      const name = escapeMarkdownV2(item.name);
      const quantity = item.quantity;
      const price = parseFloat(String(item.price)) || 0;
      const total = quantity * price;
      const formattedPrice = price.toLocaleString('ru-RU');
      const formattedTotal = total.toLocaleString('ru-RU');

      return `‚Ä¢ \`${name}\` \\- ${quantity} —à—Ç\\. x ${formattedPrice} —Å–æ–º \\= ${formattedTotal} —Å–æ–º`;
    }).join('\n');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    const clientLanguage = orderData.language === 'ky' ? '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π' : '–†—É—Å—Å–∫–∏–π';
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    const clientName = escapeMarkdownV2(orderData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
    const clientPhone = escapeMarkdownV2(orderData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');

    const formattedTotalSum = orderData.totalSum.toLocaleString('ru-RU');
    const formattedDate = new Date().toLocaleString('ru-RU');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown V2
    const message = `üõçÔ∏è *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑\\!*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${clientName}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${clientPhone}
üì± *–¢–∏–ø —Å–≤—è–∑–∏:* ${orderData.contactType === 'whatsapp' ? 'WhatsApp' : '–ó–≤–æ–Ω–æ–∫'}
üó£ *–Ø–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞:* ${clientLanguage}

üõí *–¢–æ–≤–∞—Ä—ã:*
${itemsList}

üí∞ *–ò—Ç–æ–≥–æ:* ${formattedTotalSum} —Å–æ–º

üìÖ *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* ${escapeMarkdownV2(formattedDate)}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      throw new Error('Telegram bot token not found');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown V2
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: adminTelegramId,
          text: message,
          parse_mode: 'MarkdownV2'
        }),
      }
    );

    const telegramData = await telegramResponse.json();

    if (!telegramResponse.ok) {
      console.error('Telegram API Error:', telegramData);
      throw new Error(telegramData.description || 'Failed to send message to Telegram');
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error sending order:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to send order' },
      { status: 500 }
    );
  }
} 